LET map =
    REC map' f ->
        FUN sez ->
            MATCH sez WITH
            | [] -> []
            | x :: xs -> (f x) :: (map' f xs)
IN
map (FUN y -> 2 * y * y) ((FUN x -> (x :: (x + 2) :: (x * 2) :: (x * x) :: [])) 4)
